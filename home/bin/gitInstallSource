#!/usr/bin/python
####
# Copyright (c) 2011 Nokia Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without
# limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
####

import os, sys
import subprocess
import re
import glob
import posixpath
from optparse import OptionParser

tagpattern='(.*)'
pkgname=''
exclude_patterns=[]

homedir=os.environ['HOME']
rpmsourcedir=('%s/rpmbuild/SOURCES' % homedir)
rpmreposdir=('%s/rpmbuild/REPOS' % homedir)

repodir=''

def obsBuild():
    specfiles=options.spec
    specfile=options.spec
    branch='master'
    print 'specfile=', specfile
    proc = subprocess.Popen(['grep', 'Name:', specfile],
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE).communicate()
    pkgname=proc[0]
    m = re.match("Name:[ \t\n]+(.*)[ \t\n]*", pkgname)
    if m:
        pkgname = m.group(1)
    print pkgname
    proc = subprocess.Popen(['grep', '_git', specfile],
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE).communicate()
    sourcelines=proc[0].split('\n')
    for sourceline in sourcelines:
        m = re.match("%define[ \t\n]+_gituri[ \t\n]+(.*)[ \t\n]*", sourceline)
        if m:
            source = m.group(1)
        m = re.match("%define[ \t\n]+_gitbranch[ \t\n]+(.*)[ \t\n]*", sourceline)
        if m:
            branch = m.group(1)

    repodir = ('%s/%s' % (rpmreposdir, pkgname))

    print 'source', source
    print 'branch', branch
    print 'repodir', repodir
    if not posixpath.exists(repodir):
        subprocess.Popen(['git', 'clone', source, repodir],
                            stdout=subprocess.PIPE).communicate()
    os.chdir(repodir)
    proc = subprocess.Popen(['git', 'tag', '-l'],
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE).communicate()
    ret = proc[0].strip('\n').split('\n')
    matches=[]
    tags=[]
    if len(proc[0]):
        for t in ret:
            m = re.match(tagpattern, t)
            if m:
                tags.append(t)
                matches.append(m)
        lastmatch = matches[-1]
        tagversion = lastmatch.group(1)
        tag=tags[-1]
    else:
        tag=''
    if len(tags) > 0:
        print 'running git cherry'
        proc = subprocess.Popen(['git', 'cherry', tag],
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE).communicate()
        ret = proc[0].strip('\n').split('\n')
        micro = len(ret)
        if (micro > 0):
            lastcommit = ret[-1].replace(' ', '')[0:12]
        else:
            lastcommit = ''
    else:
        proc = subprocess.Popen(['git', 'log'],
                                stdout=subprocess.PIPE).communicate()
        commits=[]
        for line in proc[0].split('\n'):
            if line:
                m = re.match('^commit[ \t](.*)', line)
                if m:
                    commits.append(m.group(1))
        tagversion = 0
        micro = len(commits)
        lastcommit=commits[0][0:12]

    version=('%s+%d+git%s' % (tagversion, micro, lastcommit))

    print 'version', version

    ## clean old files
    sourcedir=('%s/%s-%s' % (rpmsourcedir, pkgname,version))
    print 'sourcedir', sourcedir
    os.system('rm -fr %s' % sourcedir)
    os.system('mkdir -p %s' % sourcedir)

    if options.branch:
        branch=options.branch

    bindings = {'sourcedir': sourcedir, 'pkgname': pkgname, 'version': version, 'branch': branch}
    os.system('git archive --format tar --prefix %(pkgname)s-%(version)s/ --output %(sourcedir)s/%(pkgname)s-%(version)s.tar.gz %(branch)s' % bindings)

    script_path = os.path.dirname(os.path.realpath(__file__))
    os.system('%s/gen-rpm-changelog; mv changelog %s/%s.changelog;' % (script_path, sourcedir, pkgname))
    gitspecfile=('%s/%s.spec' % (repodir, pkgname))
    
    files = glob.glob('%s/*' % posixpath.dirname(specfile))
    for f in files:
        if re.match('.*~', f):
            continue
        if re.match('.spec', f):
            continue
        os.system('cp -v %s %s' % (f, sourcedir))

    if posixpath.exists(gitspecfile):
        os.system('cp -v %s %s' % (gitspecfile, sourcedir))
    else:
        os.system('cp -v %s %s' % (specfile, sourcedir))
    
    os.system("sed -i 's/^Version:.*/Version: %(version)s/' %(sourcedir)s/%(pkgname)s.spec"  % bindings)
    os.system("sed -i 's/^Source:.*/Source: %(pkgname)s-%(version)s.tar.gz/' %(sourcedir)s/%(pkgname)s.spec"  % bindings)
    os.system("sed -i 's/^Release:.*/Release: 1/' %(sourcedir)s/%(pkgname)s.spec"  % bindings)


parser = OptionParser()
parser.add_option("-B", "--branch", dest="branch",
                  help="Git branch to use")
parser.add_option("-e", "--exclude", dest="exclude", action="append",
                  help="File patterns to exclude")
parser.add_option("-r", "--rpmbuilddir", dest="rpmbuilddir",
                  help="Defaults to ~/rpmbbuild")
parser.add_option("-s", "--spec", dest="spec",
                  help="Spec file to use")
parser.add_option("-t", "--tag", dest="tagpattern",
                  help="Prefix of version tag")
(options, args) = parser.parse_args()
if options.rpmbuilddir:
    rpmbuilddir = options.rpmbuilddir
    rpmsourcedir = rpmbuilddir + "/SOURCES"
    rpmrepodir = rpmbuilddir + "/REPOS"
if options.exclude:
    exclude_patterns = options.exclude_patterns
if options.tagpattern:
    tagpattern=options.tagpattern
obsBuild()
